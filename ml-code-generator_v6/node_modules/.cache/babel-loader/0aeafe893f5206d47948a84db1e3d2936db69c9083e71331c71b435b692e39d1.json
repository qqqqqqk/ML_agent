{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = exports.SocketWithUpgrade = exports.SocketWithoutUpgrade = void 0;\nconst index_js_1 = require(\"./transports/index.js\");\nconst util_js_1 = require(\"./util.js\");\nconst parseqs_js_1 = require(\"./contrib/parseqs.js\");\nconst parseuri_js_1 = require(\"./contrib/parseuri.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst globals_node_js_1 = require(\"./globals.node.js\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\nconst withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n  // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n  // script, so we create one single event listener here which will forward the event to the socket instances\n  addEventListener(\"offline\", () => {\n    debug(\"closing %d connection(s) because the network was lost\", OFFLINE_EVENT_LISTENERS.length);\n    OFFLINE_EVENT_LISTENERS.forEach(listener => listener());\n  }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nclass SocketWithoutUpgrade extends component_emitter_1.Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri - uri or options\n   * @param {Object} opts - options\n   */\n  constructor(uri, opts) {\n    super();\n    this.binaryType = globals_node_js_1.defaultBinaryType;\n    this.writeBuffer = [];\n    this._prevBufferLen = 0;\n    this._pingInterval = -1;\n    this._pingTimeout = -1;\n    this._maxPayload = -1;\n    /**\n     * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n     * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n     */\n    this._pingTimeoutTime = Infinity;\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      const parsedUri = (0, parseuri_js_1.parse)(uri);\n      opts.hostname = parsedUri.host;\n      opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n      opts.port = parsedUri.port;\n      if (parsedUri.query) opts.query = parsedUri.query;\n    } else if (opts.host) {\n      opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n    }\n    (0, util_js_1.installTimerFunctions)(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = [];\n    this._transportsByName = {};\n    opts.transports.forEach(t => {\n      const transportName = t.prototype.name;\n      this.transports.push(transportName);\n      this._transportsByName[transportName] = t;\n    });\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: false\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\n    }\n    if (withEventListeners) {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        this._beforeunloadEventListener = () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        };\n        addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n      }\n      if (this.hostname !== \"localhost\") {\n        debug(\"adding listener for the 'offline' event\");\n        this._offlineEventListener = () => {\n          this._onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n        OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n      }\n    }\n    if (this.opts.withCredentials) {\n      this._cookieJar = (0, globals_node_js_1.createCookieJar)();\n    }\n    this._open();\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} name - transport name\n   * @return {Transport}\n   * @private\n   */\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = Object.assign({}, this.opts.query);\n    // append engine.io protocol identifier\n    query.EIO = engine_io_parser_1.protocol;\n    // transport name\n    query.transport = name;\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    }, this.opts.transportOptions[name]);\n    debug(\"options: %j\", opts);\n    return new this._transportsByName[name](opts);\n  }\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @private\n   */\n  _open() {\n    if (this.transports.length === 0) {\n      // Emit error on next tick so it can be listened to\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    }\n    const transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n    this.readyState = \"opening\";\n    const transport = this.createTransport(transportName);\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @private\n   */\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    }\n    // set up transport\n    this.transport = transport;\n    // set up transport listeners\n    transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", reason => this._onClose(\"transport close\", reason));\n  }\n  /**\n   * Called when connection is deemed open.\n   *\n   * @private\n   */\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush();\n  }\n  /**\n   * Handles a packet.\n   *\n   * @private\n   */\n  _onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n      this.emitReserved(\"packet\", packet);\n      // Socket is live - any packet counts\n      this.emitReserved(\"heartbeat\");\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n        case \"ping\":\n          this._sendPacket(\"pong\");\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n          this._resetPingTimeout();\n          break;\n        case \"error\":\n          const err = new Error(\"server error\");\n          // @ts-ignore\n          err.code = packet.data;\n          this._onError(err);\n          break;\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} data - handshake obj\n   * @private\n   */\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this._pingInterval = data.pingInterval;\n    this._pingTimeout = data.pingTimeout;\n    this._maxPayload = data.maxPayload;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this._resetPingTimeout();\n  }\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @private\n   */\n  _resetPingTimeout() {\n    this.clearTimeoutFn(this._pingTimeoutTimer);\n    const delay = this._pingInterval + this._pingTimeout;\n    this._pingTimeoutTime = Date.now() + delay;\n    this._pingTimeoutTimer = this.setTimeoutFn(() => {\n      this._onClose(\"ping timeout\");\n    }, delay);\n    if (this.opts.autoUnref) {\n      this._pingTimeoutTimer.unref();\n    }\n  }\n  /**\n   * Called on `drain` event\n   *\n   * @private\n   */\n  _onDrain() {\n    this.writeBuffer.splice(0, this._prevBufferLen);\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this._prevBufferLen = 0;\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\n   * Flush write buffers.\n   *\n   * @private\n   */\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const packets = this._getWritablePackets();\n      debug(\"flushing %d packets in socket\", packets.length);\n      this.transport.send(packets);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this._prevBufferLen = packets.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  /**\n   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n   * long-polling)\n   *\n   * @private\n   */\n  _getWritablePackets() {\n    const shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n    if (!shouldCheckPayloadSize) {\n      return this.writeBuffer;\n    }\n    let payloadSize = 1; // first packet type\n    for (let i = 0; i < this.writeBuffer.length; i++) {\n      const data = this.writeBuffer[i].data;\n      if (data) {\n        payloadSize += (0, util_js_1.byteLength)(data);\n      }\n      if (i > 0 && payloadSize > this._maxPayload) {\n        debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n        return this.writeBuffer.slice(0, i);\n      }\n      payloadSize += 2; // separator + packet type\n    }\n    debug(\"payload size is %d (max: %d)\", payloadSize, this._maxPayload);\n    return this.writeBuffer;\n  }\n  /**\n   * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n   *\n   * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n   * `write()` method then the message would not be buffered by the Socket.IO client.\n   *\n   * @return {boolean}\n   * @private\n   */\n  /* private */\n  _hasPingExpired() {\n    if (!this._pingTimeoutTime) return true;\n    const hasExpired = Date.now() > this._pingTimeoutTime;\n    if (hasExpired) {\n      debug(\"throttled timer detected, scheduling connection close\");\n      this._pingTimeoutTime = 0;\n      (0, globals_node_js_1.nextTick)(() => {\n        this._onClose(\"ping timeout\");\n      }, this.setTimeoutFn);\n    }\n    return hasExpired;\n  }\n  /**\n   * Sends a message.\n   *\n   * @param {String} msg - message.\n   * @param {Object} options.\n   * @param {Function} fn - callback function.\n   * @return {Socket} for chaining.\n   */\n  write(msg, options, fn) {\n    this._sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\n   * Sends a message. Alias of {@link Socket#write}.\n   *\n   * @param {String} msg - message.\n   * @param {Object} options.\n   * @param {Function} fn - callback function.\n   * @return {Socket} for chaining.\n   */\n  send(msg, options, fn) {\n    this._sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param {String} type: packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} fn - callback function.\n   * @private\n   */\n  _sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\n   * Closes the connection.\n   */\n  close() {\n    const close = () => {\n      this._onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      this.transport.close();\n    };\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n    return this;\n  }\n  /**\n   * Called upon transport error\n   *\n   * @private\n   */\n  _onError(err) {\n    debug(\"socket error %j\", err);\n    SocketWithoutUpgrade.priorWebsocketSuccess = false;\n    if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n      debug(\"trying next transport\");\n      this.transports.shift();\n      return this._open();\n    }\n    this.emitReserved(\"error\", err);\n    this._onClose(\"transport error\", err);\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @private\n   */\n  _onClose(reason, description) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket close with reason: \"%s\"', reason);\n      // clear timers\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n      // ensure transport won't stay open\n      this.transport.close();\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n      if (withEventListeners) {\n        if (this._beforeunloadEventListener) {\n          removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n        }\n        if (this._offlineEventListener) {\n          const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n          if (i !== -1) {\n            debug(\"removing listener for the 'offline' event\");\n            OFFLINE_EVENT_LISTENERS.splice(i, 1);\n          }\n        }\n      }\n      // set ready state\n      this.readyState = \"closed\";\n      // clear session id\n      this.id = null;\n      // emit close event\n      this.emitReserved(\"close\", reason, description);\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      this.writeBuffer = [];\n      this._prevBufferLen = 0;\n    }\n  }\n}\nexports.SocketWithoutUpgrade = SocketWithoutUpgrade;\nSocketWithoutUpgrade.protocol = engine_io_parser_1.protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nclass SocketWithUpgrade extends SocketWithoutUpgrade {\n  constructor() {\n    super(...arguments);\n    this._upgrades = [];\n  }\n  onOpen() {\n    super.onOpen();\n    if (\"open\" === this.readyState && this.opts.upgrade) {\n      debug(\"starting upgrade probes\");\n      for (let i = 0; i < this._upgrades.length; i++) {\n        this._probe(this._upgrades[i]);\n      }\n    }\n  }\n  /**\n   * Probes a transport.\n   *\n   * @param {String} name - transport name\n   * @private\n   */\n  _probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name);\n    let failed = false;\n    SocketWithoutUpgrade.priorWebsocketSuccess = false;\n    const onTransportOpen = () => {\n      if (failed) return;\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n          debug('pausing current transport \"%s\"', this.transport.name);\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          // @ts-ignore\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n    function freezeTransport() {\n      if (failed) return;\n      // Any callback called by transport should be ignored since now\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    }\n    // Handle any error that happens while probing\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err);\n      // @ts-ignore\n      error.transport = transport.name;\n      freezeTransport();\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n      this.emitReserved(\"upgradeError\", error);\n    };\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    }\n    // Remove all listeners on the transport and on self\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n      // favor WebTransport\n      this.setTimeoutFn(() => {\n        if (!failed) {\n          transport.open();\n        }\n      }, 200);\n    } else {\n      transport.open();\n    }\n  }\n  onHandshake(data) {\n    this._upgrades = this._filterUpgrades(data.upgrades);\n    super.onHandshake(data);\n  }\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} upgrades - server upgrades\n   * @private\n   */\n  _filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    for (let i = 0; i < upgrades.length; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\nexports.SocketWithUpgrade = SocketWithUpgrade;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nclass Socket extends SocketWithUpgrade {\n  constructor(uri, opts = {}) {\n    const o = typeof uri === \"object\" ? uri : opts;\n    if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n      o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(transportName => index_js_1.transports[transportName]).filter(t => !!t);\n    }\n    super(uri, o);\n  }\n}\nexports.Socket = Socket;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","SocketWithUpgrade","SocketWithoutUpgrade","index_js_1","require","util_js_1","parseqs_js_1","parseuri_js_1","component_emitter_1","engine_io_parser_1","globals_node_js_1","debug_1","debug","default","withEventListeners","addEventListener","removeEventListener","OFFLINE_EVENT_LISTENERS","length","forEach","listener","Emitter","constructor","uri","opts","binaryType","defaultBinaryType","writeBuffer","_prevBufferLen","_pingInterval","_pingTimeout","_maxPayload","_pingTimeoutTime","Infinity","parsedUri","parse","hostname","host","secure","protocol","port","query","installTimerFunctions","location","transports","_transportsByName","t","transportName","prototype","name","push","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","_beforeunloadEventListener","transport","removeAllListeners","close","_offlineEventListener","_onClose","description","_cookieJar","createCookieJar","_open","createTransport","EIO","id","sid","socket","setTimeoutFn","emitReserved","priorWebsocketSuccess","indexOf","readyState","open","setTransport","on","_onDrain","bind","_onPacket","_onError","reason","onOpen","flush","packet","type","data","onHandshake","JSON","_sendPacket","_resetPingTimeout","err","Error","code","pingInterval","pingTimeout","maxPayload","clearTimeoutFn","_pingTimeoutTimer","delay","Date","now","autoUnref","unref","splice","writable","upgrading","packets","_getWritablePackets","send","shouldCheckPayloadSize","payloadSize","i","byteLength","slice","_hasPingExpired","hasExpired","nextTick","write","msg","options","fn","undefined","compress","once","cleanupAndClose","off","waitForUpgrade","tryAllTransports","shift","arguments","_upgrades","_probe","failed","onTransportOpen","pause","cleanup","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","_filterUpgrades","upgrades","filteredUpgrades","o","map","filter"],"sources":["d:/University/Group/ml-code-generator_v4/ml-code-generator_v4/node_modules/engine.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = exports.SocketWithUpgrade = exports.SocketWithoutUpgrade = void 0;\nconst index_js_1 = require(\"./transports/index.js\");\nconst util_js_1 = require(\"./util.js\");\nconst parseqs_js_1 = require(\"./contrib/parseqs.js\");\nconst parseuri_js_1 = require(\"./contrib/parseuri.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst globals_node_js_1 = require(\"./globals.node.js\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\nconst withEventListeners = typeof addEventListener === \"function\" &&\n    typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n        debug(\"closing %d connection(s) because the network was lost\", OFFLINE_EVENT_LISTENERS.length);\n        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());\n    }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nclass SocketWithoutUpgrade extends component_emitter_1.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n        super();\n        this.binaryType = globals_node_js_1.defaultBinaryType;\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n        this._pingInterval = -1;\n        this._pingTimeout = -1;\n        this._maxPayload = -1;\n        /**\n         * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n         * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n         */\n        this._pingTimeoutTime = Infinity;\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            const parsedUri = (0, parseuri_js_1.parse)(uri);\n            opts.hostname = parsedUri.host;\n            opts.secure =\n                parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n            opts.port = parsedUri.port;\n            if (parsedUri.query)\n                opts.query = parsedUri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n        }\n        (0, util_js_1.installTimerFunctions)(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = [];\n        this._transportsByName = {};\n        opts.transports.forEach((t) => {\n            const transportName = t.prototype.name;\n            this.transports.push(transportName);\n            this._transportsByName[transportName] = t;\n        });\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\n        }\n        if (withEventListeners) {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this._beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                debug(\"adding listener for the 'offline' event\");\n                this._offlineEventListener = () => {\n                    this._onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n            }\n        }\n        if (this.opts.withCredentials) {\n            this._cookieJar = (0, globals_node_js_1.createCookieJar)();\n        }\n        this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        debug('creating transport \"%s\"', name);\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = engine_io_parser_1.protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        debug(\"options: %j\", opts);\n        return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n        if (this.transports.length === 0) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        const transportName = this.opts.rememberUpgrade &&\n            SocketWithoutUpgrade.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1\n            ? \"websocket\"\n            : this.transports[0];\n        this.readyState = \"opening\";\n        const transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        debug(\"setting transport %s\", transport.name);\n        if (this.transport) {\n            debug(\"clearing existing transport %s\", this.transport.name);\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this._onDrain.bind(this))\n            .on(\"packet\", this._onPacket.bind(this))\n            .on(\"error\", this._onError.bind(this))\n            .on(\"close\", (reason) => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        debug(\"socket open\");\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess =\n            \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this._sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    this._resetPingTimeout();\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this._onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n            debug('packet received with socket readyState \"%s\"', this.readyState);\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        const delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n            this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n            this._pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this._getWritablePackets();\n            debug(\"flushing %d packets in socket\", packets.length);\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this._prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n        const shouldCheckPayloadSize = this._maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += (0, util_js_1.byteLength)(data);\n            }\n            if (i > 0 && payloadSize > this._maxPayload) {\n                debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        debug(\"payload size is %d (max: %d)\", payloadSize, this._maxPayload);\n        return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */ _hasPingExpired() {\n        if (!this._pingTimeoutTime)\n            return true;\n        const hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n            debug(\"throttled timer detected, scheduling connection close\");\n            this._pingTimeoutTime = 0;\n            (0, globals_node_js_1.nextTick)(() => {\n                this._onClose(\"ping timeout\");\n            }, this.setTimeoutFn);\n        }\n        return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this._onClose(\"forced close\");\n            debug(\"socket closing - telling transport to close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n        debug(\"socket error %j\", err);\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports &&\n            this.transports.length > 1 &&\n            this.readyState === \"opening\") {\n            debug(\"trying next transport\");\n            this.transports.shift();\n            return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket close with reason: \"%s\"', reason);\n            // clear timers\n            this.clearTimeoutFn(this._pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (withEventListeners) {\n                if (this._beforeunloadEventListener) {\n                    removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n                }\n                if (this._offlineEventListener) {\n                    const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n                    if (i !== -1) {\n                        debug(\"removing listener for the 'offline' event\");\n                        OFFLINE_EVENT_LISTENERS.splice(i, 1);\n                    }\n                }\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this._prevBufferLen = 0;\n        }\n    }\n}\nexports.SocketWithoutUpgrade = SocketWithoutUpgrade;\nSocketWithoutUpgrade.protocol = engine_io_parser_1.protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nclass SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n        super(...arguments);\n        this._upgrades = [];\n    }\n    onOpen() {\n        super.onOpen();\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            debug(\"starting upgrade probes\");\n            for (let i = 0; i < this._upgrades.length; i++) {\n                this._probe(this._upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n        debug('probing transport \"%s\"', name);\n        let transport = this.createTransport(name);\n        let failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            debug('probe transport \"%s\" opened', name);\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    debug('probe transport \"%s\" pong', name);\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    SocketWithoutUpgrade.priorWebsocketSuccess =\n                        \"websocket\" === transport.name;\n                    debug('pausing current transport \"%s\"', this.transport.name);\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        debug(\"changing transport and sending upgrade packet\");\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    debug('probe transport \"%s\" failed', name);\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            debug('probe transport \"%s\" failed because of error: %s', name, err);\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        for (let i = 0; i < upgrades.length; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nexports.SocketWithUpgrade = SocketWithUpgrade;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nclass Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n        const o = typeof uri === \"object\" ? uri : opts;\n        if (!o.transports ||\n            (o.transports && typeof o.transports[0] === \"string\")) {\n            o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"])\n                .map((transportName) => index_js_1.transports[transportName])\n                .filter((t) => !!t);\n        }\n        super(uri, o);\n    }\n}\nexports.Socket = Socket;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAGF,OAAO,CAACG,iBAAiB,GAAGH,OAAO,CAACI,oBAAoB,GAAG,KAAK,CAAC;AAClF,MAAMC,UAAU,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACnD,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACtC,MAAME,YAAY,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AACpD,MAAMG,aAAa,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACtD,MAAMI,mBAAmB,GAAGJ,OAAO,CAAC,8BAA8B,CAAC;AACnE,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,mBAAmB,CAAC;AACtD,MAAMO,OAAO,GAAGlB,eAAe,CAACW,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACnD,MAAMQ,KAAK,GAAG,CAAC,CAAC,EAAED,OAAO,CAACE,OAAO,EAAE,yBAAyB,CAAC,CAAC,CAAC;AAC/D,MAAMC,kBAAkB,GAAG,OAAOC,gBAAgB,KAAK,UAAU,IAC7D,OAAOC,mBAAmB,KAAK,UAAU;AAC7C,MAAMC,uBAAuB,GAAG,EAAE;AAClC,IAAIH,kBAAkB,EAAE;EACpB;EACA;EACAC,gBAAgB,CAAC,SAAS,EAAE,MAAM;IAC9BH,KAAK,CAAC,uDAAuD,EAAEK,uBAAuB,CAACC,MAAM,CAAC;IAC9FD,uBAAuB,CAACE,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAAC,CAAC,CAAC;EAC7D,CAAC,EAAE,KAAK,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMlB,oBAAoB,SAASM,mBAAmB,CAACa,OAAO,CAAC;EAC3D;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,GAAG,EAAEC,IAAI,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,UAAU,GAAGf,iBAAiB,CAACgB,iBAAiB;IACrD,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,cAAc,GAAG,CAAC;IACvB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC;IACrB;AACR;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAGC,QAAQ;IAChC,IAAIV,GAAG,IAAI,QAAQ,KAAK,OAAOA,GAAG,EAAE;MAChCC,IAAI,GAAGD,GAAG;MACVA,GAAG,GAAG,IAAI;IACd;IACA,IAAIA,GAAG,EAAE;MACL,MAAMW,SAAS,GAAG,CAAC,CAAC,EAAE3B,aAAa,CAAC4B,KAAK,EAAEZ,GAAG,CAAC;MAC/CC,IAAI,CAACY,QAAQ,GAAGF,SAAS,CAACG,IAAI;MAC9Bb,IAAI,CAACc,MAAM,GACPJ,SAAS,CAACK,QAAQ,KAAK,OAAO,IAAIL,SAAS,CAACK,QAAQ,KAAK,KAAK;MAClEf,IAAI,CAACgB,IAAI,GAAGN,SAAS,CAACM,IAAI;MAC1B,IAAIN,SAAS,CAACO,KAAK,EACfjB,IAAI,CAACiB,KAAK,GAAGP,SAAS,CAACO,KAAK;IACpC,CAAC,MACI,IAAIjB,IAAI,CAACa,IAAI,EAAE;MAChBb,IAAI,CAACY,QAAQ,GAAG,CAAC,CAAC,EAAE7B,aAAa,CAAC4B,KAAK,EAAEX,IAAI,CAACa,IAAI,CAAC,CAACA,IAAI;IAC5D;IACA,CAAC,CAAC,EAAEhC,SAAS,CAACqC,qBAAqB,EAAE,IAAI,EAAElB,IAAI,CAAC;IAChD,IAAI,CAACc,MAAM,GACP,IAAI,IAAId,IAAI,CAACc,MAAM,GACbd,IAAI,CAACc,MAAM,GACX,OAAOK,QAAQ,KAAK,WAAW,IAAI,QAAQ,KAAKA,QAAQ,CAACJ,QAAQ;IAC3E,IAAIf,IAAI,CAACY,QAAQ,IAAI,CAACZ,IAAI,CAACgB,IAAI,EAAE;MAC7B;MACAhB,IAAI,CAACgB,IAAI,GAAG,IAAI,CAACF,MAAM,GAAG,KAAK,GAAG,IAAI;IAC1C;IACA,IAAI,CAACF,QAAQ,GACTZ,IAAI,CAACY,QAAQ,KACR,OAAOO,QAAQ,KAAK,WAAW,GAAGA,QAAQ,CAACP,QAAQ,GAAG,WAAW,CAAC;IAC3E,IAAI,CAACI,IAAI,GACLhB,IAAI,CAACgB,IAAI,KACJ,OAAOG,QAAQ,KAAK,WAAW,IAAIA,QAAQ,CAACH,IAAI,GAC3CG,QAAQ,CAACH,IAAI,GACb,IAAI,CAACF,MAAM,GACP,KAAK,GACL,IAAI,CAAC;IACvB,IAAI,CAACM,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,iBAAiB,GAAG,CAAC,CAAC;IAC3BrB,IAAI,CAACoB,UAAU,CAACzB,OAAO,CAAE2B,CAAC,IAAK;MAC3B,MAAMC,aAAa,GAAGD,CAAC,CAACE,SAAS,CAACC,IAAI;MACtC,IAAI,CAACL,UAAU,CAACM,IAAI,CAACH,aAAa,CAAC;MACnC,IAAI,CAACF,iBAAiB,CAACE,aAAa,CAAC,GAAGD,CAAC;IAC7C,CAAC,CAAC;IACF,IAAI,CAACtB,IAAI,GAAG5B,MAAM,CAACuD,MAAM,CAAC;MACtBC,IAAI,EAAE,YAAY;MAClBC,KAAK,EAAE,KAAK;MACZC,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAE,IAAI;MACbC,cAAc,EAAE,GAAG;MACnBC,eAAe,EAAE,KAAK;MACtBC,gBAAgB,EAAE,IAAI;MACtBC,kBAAkB,EAAE,IAAI;MACxBC,iBAAiB,EAAE;QACfC,SAAS,EAAE;MACf,CAAC;MACDC,gBAAgB,EAAE,CAAC,CAAC;MACpBC,mBAAmB,EAAE;IACzB,CAAC,EAAEvC,IAAI,CAAC;IACR,IAAI,CAACA,IAAI,CAAC4B,IAAI,GACV,IAAI,CAAC5B,IAAI,CAAC4B,IAAI,CAACY,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAC5B,IAAI,CAACxC,IAAI,CAACkC,gBAAgB,GAAG,GAAG,GAAG,EAAE,CAAC;IAC/C,IAAI,OAAO,IAAI,CAAClC,IAAI,CAACiB,KAAK,KAAK,QAAQ,EAAE;MACrC,IAAI,CAACjB,IAAI,CAACiB,KAAK,GAAG,CAAC,CAAC,EAAEnC,YAAY,CAAC2D,MAAM,EAAE,IAAI,CAACzC,IAAI,CAACiB,KAAK,CAAC;IAC/D;IACA,IAAI3B,kBAAkB,EAAE;MACpB,IAAI,IAAI,CAACU,IAAI,CAACuC,mBAAmB,EAAE;QAC/B;QACA;QACA;QACA,IAAI,CAACG,0BAA0B,GAAG,MAAM;UACpC,IAAI,IAAI,CAACC,SAAS,EAAE;YAChB;YACA,IAAI,CAACA,SAAS,CAACC,kBAAkB,CAAC,CAAC;YACnC,IAAI,CAACD,SAAS,CAACE,KAAK,CAAC,CAAC;UAC1B;QACJ,CAAC;QACDtD,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAACmD,0BAA0B,EAAE,KAAK,CAAC;MAC5E;MACA,IAAI,IAAI,CAAC9B,QAAQ,KAAK,WAAW,EAAE;QAC/BxB,KAAK,CAAC,yCAAyC,CAAC;QAChD,IAAI,CAAC0D,qBAAqB,GAAG,MAAM;UAC/B,IAAI,CAACC,QAAQ,CAAC,iBAAiB,EAAE;YAC7BC,WAAW,EAAE;UACjB,CAAC,CAAC;QACN,CAAC;QACDvD,uBAAuB,CAACiC,IAAI,CAAC,IAAI,CAACoB,qBAAqB,CAAC;MAC5D;IACJ;IACA,IAAI,IAAI,CAAC9C,IAAI,CAAC8B,eAAe,EAAE;MAC3B,IAAI,CAACmB,UAAU,GAAG,CAAC,CAAC,EAAE/D,iBAAiB,CAACgE,eAAe,EAAE,CAAC;IAC9D;IACA,IAAI,CAACC,KAAK,CAAC,CAAC;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAAC3B,IAAI,EAAE;IAClBrC,KAAK,CAAC,yBAAyB,EAAEqC,IAAI,CAAC;IACtC,MAAMR,KAAK,GAAG7C,MAAM,CAACuD,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC3B,IAAI,CAACiB,KAAK,CAAC;IAChD;IACAA,KAAK,CAACoC,GAAG,GAAGpE,kBAAkB,CAAC8B,QAAQ;IACvC;IACAE,KAAK,CAAC0B,SAAS,GAAGlB,IAAI;IACtB;IACA,IAAI,IAAI,CAAC6B,EAAE,EACPrC,KAAK,CAACsC,GAAG,GAAG,IAAI,CAACD,EAAE;IACvB,MAAMtD,IAAI,GAAG5B,MAAM,CAACuD,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC3B,IAAI,EAAE;MACtCiB,KAAK;MACLuC,MAAM,EAAE,IAAI;MACZ5C,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,IAAI,EAAE,IAAI,CAACA;IACf,CAAC,EAAE,IAAI,CAAChB,IAAI,CAACsC,gBAAgB,CAACb,IAAI,CAAC,CAAC;IACpCrC,KAAK,CAAC,aAAa,EAAEY,IAAI,CAAC;IAC1B,OAAO,IAAI,IAAI,CAACqB,iBAAiB,CAACI,IAAI,CAAC,CAACzB,IAAI,CAAC;EACjD;EACA;AACJ;AACA;AACA;AACA;EACImD,KAAKA,CAAA,EAAG;IACJ,IAAI,IAAI,CAAC/B,UAAU,CAAC1B,MAAM,KAAK,CAAC,EAAE;MAC9B;MACA,IAAI,CAAC+D,YAAY,CAAC,MAAM;QACpB,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE,yBAAyB,CAAC;MACzD,CAAC,EAAE,CAAC,CAAC;MACL;IACJ;IACA,MAAMnC,aAAa,GAAG,IAAI,CAACvB,IAAI,CAACiC,eAAe,IAC3CvD,oBAAoB,CAACiF,qBAAqB,IAC1C,IAAI,CAACvC,UAAU,CAACwC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GACzC,WAAW,GACX,IAAI,CAACxC,UAAU,CAAC,CAAC,CAAC;IACxB,IAAI,CAACyC,UAAU,GAAG,SAAS;IAC3B,MAAMlB,SAAS,GAAG,IAAI,CAACS,eAAe,CAAC7B,aAAa,CAAC;IACrDoB,SAAS,CAACmB,IAAI,CAAC,CAAC;IAChB,IAAI,CAACC,YAAY,CAACpB,SAAS,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;EACIoB,YAAYA,CAACpB,SAAS,EAAE;IACpBvD,KAAK,CAAC,sBAAsB,EAAEuD,SAAS,CAAClB,IAAI,CAAC;IAC7C,IAAI,IAAI,CAACkB,SAAS,EAAE;MAChBvD,KAAK,CAAC,gCAAgC,EAAE,IAAI,CAACuD,SAAS,CAAClB,IAAI,CAAC;MAC5D,IAAI,CAACkB,SAAS,CAACC,kBAAkB,CAAC,CAAC;IACvC;IACA;IACA,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B;IACAA,SAAS,CACJqB,EAAE,CAAC,OAAO,EAAE,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACrCF,EAAE,CAAC,QAAQ,EAAE,IAAI,CAACG,SAAS,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC,CACvCF,EAAE,CAAC,OAAO,EAAE,IAAI,CAACI,QAAQ,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC,CACrCF,EAAE,CAAC,OAAO,EAAGK,MAAM,IAAK,IAAI,CAACtB,QAAQ,CAAC,iBAAiB,EAAEsB,MAAM,CAAC,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACLlF,KAAK,CAAC,aAAa,CAAC;IACpB,IAAI,CAACyE,UAAU,GAAG,MAAM;IACxBnF,oBAAoB,CAACiF,qBAAqB,GACtC,WAAW,KAAK,IAAI,CAAChB,SAAS,CAAClB,IAAI;IACvC,IAAI,CAACiC,YAAY,CAAC,MAAM,CAAC;IACzB,IAAI,CAACa,KAAK,CAAC,CAAC;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIJ,SAASA,CAACK,MAAM,EAAE;IACd,IAAI,SAAS,KAAK,IAAI,CAACX,UAAU,IAC7B,MAAM,KAAK,IAAI,CAACA,UAAU,IAC1B,SAAS,KAAK,IAAI,CAACA,UAAU,EAAE;MAC/BzE,KAAK,CAAC,sCAAsC,EAAEoF,MAAM,CAACC,IAAI,EAAED,MAAM,CAACE,IAAI,CAAC;MACvE,IAAI,CAAChB,YAAY,CAAC,QAAQ,EAAEc,MAAM,CAAC;MACnC;MACA,IAAI,CAACd,YAAY,CAAC,WAAW,CAAC;MAC9B,QAAQc,MAAM,CAACC,IAAI;QACf,KAAK,MAAM;UACP,IAAI,CAACE,WAAW,CAACC,IAAI,CAACjE,KAAK,CAAC6D,MAAM,CAACE,IAAI,CAAC,CAAC;UACzC;QACJ,KAAK,MAAM;UACP,IAAI,CAACG,WAAW,CAAC,MAAM,CAAC;UACxB,IAAI,CAACnB,YAAY,CAAC,MAAM,CAAC;UACzB,IAAI,CAACA,YAAY,CAAC,MAAM,CAAC;UACzB,IAAI,CAACoB,iBAAiB,CAAC,CAAC;UACxB;QACJ,KAAK,OAAO;UACR,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,cAAc,CAAC;UACrC;UACAD,GAAG,CAACE,IAAI,GAAGT,MAAM,CAACE,IAAI;UACtB,IAAI,CAACN,QAAQ,CAACW,GAAG,CAAC;UAClB;QACJ,KAAK,SAAS;UACV,IAAI,CAACrB,YAAY,CAAC,MAAM,EAAEc,MAAM,CAACE,IAAI,CAAC;UACtC,IAAI,CAAChB,YAAY,CAAC,SAAS,EAAEc,MAAM,CAACE,IAAI,CAAC;UACzC;MACR;IACJ,CAAC,MACI;MACDtF,KAAK,CAAC,6CAA6C,EAAE,IAAI,CAACyE,UAAU,CAAC;IACzE;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIc,WAAWA,CAACD,IAAI,EAAE;IACd,IAAI,CAAChB,YAAY,CAAC,WAAW,EAAEgB,IAAI,CAAC;IACpC,IAAI,CAACpB,EAAE,GAAGoB,IAAI,CAACnB,GAAG;IAClB,IAAI,CAACZ,SAAS,CAAC1B,KAAK,CAACsC,GAAG,GAAGmB,IAAI,CAACnB,GAAG;IACnC,IAAI,CAAClD,aAAa,GAAGqE,IAAI,CAACQ,YAAY;IACtC,IAAI,CAAC5E,YAAY,GAAGoE,IAAI,CAACS,WAAW;IACpC,IAAI,CAAC5E,WAAW,GAAGmE,IAAI,CAACU,UAAU;IAClC,IAAI,CAACd,MAAM,CAAC,CAAC;IACb;IACA,IAAI,QAAQ,KAAK,IAAI,CAACT,UAAU,EAC5B;IACJ,IAAI,CAACiB,iBAAiB,CAAC,CAAC;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACIA,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACO,cAAc,CAAC,IAAI,CAACC,iBAAiB,CAAC;IAC3C,MAAMC,KAAK,GAAG,IAAI,CAAClF,aAAa,GAAG,IAAI,CAACC,YAAY;IACpD,IAAI,CAACE,gBAAgB,GAAGgF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK;IAC1C,IAAI,CAACD,iBAAiB,GAAG,IAAI,CAAC7B,YAAY,CAAC,MAAM;MAC7C,IAAI,CAACV,QAAQ,CAAC,cAAc,CAAC;IACjC,CAAC,EAAEwC,KAAK,CAAC;IACT,IAAI,IAAI,CAACvF,IAAI,CAAC0F,SAAS,EAAE;MACrB,IAAI,CAACJ,iBAAiB,CAACK,KAAK,CAAC,CAAC;IAClC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI1B,QAAQA,CAAA,EAAG;IACP,IAAI,CAAC9D,WAAW,CAACyF,MAAM,CAAC,CAAC,EAAE,IAAI,CAACxF,cAAc,CAAC;IAC/C;IACA;IACA;IACA,IAAI,CAACA,cAAc,GAAG,CAAC;IACvB,IAAI,CAAC,KAAK,IAAI,CAACD,WAAW,CAACT,MAAM,EAAE;MAC/B,IAAI,CAACgE,YAAY,CAAC,OAAO,CAAC;IAC9B,CAAC,MACI;MACD,IAAI,CAACa,KAAK,CAAC,CAAC;IAChB;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIA,KAAKA,CAAA,EAAG;IACJ,IAAI,QAAQ,KAAK,IAAI,CAACV,UAAU,IAC5B,IAAI,CAAClB,SAAS,CAACkD,QAAQ,IACvB,CAAC,IAAI,CAACC,SAAS,IACf,IAAI,CAAC3F,WAAW,CAACT,MAAM,EAAE;MACzB,MAAMqG,OAAO,GAAG,IAAI,CAACC,mBAAmB,CAAC,CAAC;MAC1C5G,KAAK,CAAC,+BAA+B,EAAE2G,OAAO,CAACrG,MAAM,CAAC;MACtD,IAAI,CAACiD,SAAS,CAACsD,IAAI,CAACF,OAAO,CAAC;MAC5B;MACA;MACA,IAAI,CAAC3F,cAAc,GAAG2F,OAAO,CAACrG,MAAM;MACpC,IAAI,CAACgE,YAAY,CAAC,OAAO,CAAC;IAC9B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIsC,mBAAmBA,CAAA,EAAG;IAClB,MAAME,sBAAsB,GAAG,IAAI,CAAC3F,WAAW,IAC3C,IAAI,CAACoC,SAAS,CAAClB,IAAI,KAAK,SAAS,IACjC,IAAI,CAACtB,WAAW,CAACT,MAAM,GAAG,CAAC;IAC/B,IAAI,CAACwG,sBAAsB,EAAE;MACzB,OAAO,IAAI,CAAC/F,WAAW;IAC3B;IACA,IAAIgG,WAAW,GAAG,CAAC,CAAC,CAAC;IACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjG,WAAW,CAACT,MAAM,EAAE0G,CAAC,EAAE,EAAE;MAC9C,MAAM1B,IAAI,GAAG,IAAI,CAACvE,WAAW,CAACiG,CAAC,CAAC,CAAC1B,IAAI;MACrC,IAAIA,IAAI,EAAE;QACNyB,WAAW,IAAI,CAAC,CAAC,EAAEtH,SAAS,CAACwH,UAAU,EAAE3B,IAAI,CAAC;MAClD;MACA,IAAI0B,CAAC,GAAG,CAAC,IAAID,WAAW,GAAG,IAAI,CAAC5F,WAAW,EAAE;QACzCnB,KAAK,CAAC,gCAAgC,EAAEgH,CAAC,EAAE,IAAI,CAACjG,WAAW,CAACT,MAAM,CAAC;QACnE,OAAO,IAAI,CAACS,WAAW,CAACmG,KAAK,CAAC,CAAC,EAAEF,CAAC,CAAC;MACvC;MACAD,WAAW,IAAI,CAAC,CAAC,CAAC;IACtB;IACA/G,KAAK,CAAC,8BAA8B,EAAE+G,WAAW,EAAE,IAAI,CAAC5F,WAAW,CAAC;IACpE,OAAO,IAAI,CAACJ,WAAW;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EAAcoG,eAAeA,CAAA,EAAG;IAC5B,IAAI,CAAC,IAAI,CAAC/F,gBAAgB,EACtB,OAAO,IAAI;IACf,MAAMgG,UAAU,GAAGhB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACjF,gBAAgB;IACrD,IAAIgG,UAAU,EAAE;MACZpH,KAAK,CAAC,uDAAuD,CAAC;MAC9D,IAAI,CAACoB,gBAAgB,GAAG,CAAC;MACzB,CAAC,CAAC,EAAEtB,iBAAiB,CAACuH,QAAQ,EAAE,MAAM;QAClC,IAAI,CAAC1D,QAAQ,CAAC,cAAc,CAAC;MACjC,CAAC,EAAE,IAAI,CAACU,YAAY,CAAC;IACzB;IACA,OAAO+C,UAAU;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,KAAKA,CAACC,GAAG,EAAEC,OAAO,EAAEC,EAAE,EAAE;IACpB,IAAI,CAAChC,WAAW,CAAC,SAAS,EAAE8B,GAAG,EAAEC,OAAO,EAAEC,EAAE,CAAC;IAC7C,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIZ,IAAIA,CAACU,GAAG,EAAEC,OAAO,EAAEC,EAAE,EAAE;IACnB,IAAI,CAAChC,WAAW,CAAC,SAAS,EAAE8B,GAAG,EAAEC,OAAO,EAAEC,EAAE,CAAC;IAC7C,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIhC,WAAWA,CAACJ,IAAI,EAAEC,IAAI,EAAEkC,OAAO,EAAEC,EAAE,EAAE;IACjC,IAAI,UAAU,KAAK,OAAOnC,IAAI,EAAE;MAC5BmC,EAAE,GAAGnC,IAAI;MACTA,IAAI,GAAGoC,SAAS;IACpB;IACA,IAAI,UAAU,KAAK,OAAOF,OAAO,EAAE;MAC/BC,EAAE,GAAGD,OAAO;MACZA,OAAO,GAAG,IAAI;IAClB;IACA,IAAI,SAAS,KAAK,IAAI,CAAC/C,UAAU,IAAI,QAAQ,KAAK,IAAI,CAACA,UAAU,EAAE;MAC/D;IACJ;IACA+C,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACG,QAAQ,GAAG,KAAK,KAAKH,OAAO,CAACG,QAAQ;IAC7C,MAAMvC,MAAM,GAAG;MACXC,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA,IAAI;MACVkC,OAAO,EAAEA;IACb,CAAC;IACD,IAAI,CAAClD,YAAY,CAAC,cAAc,EAAEc,MAAM,CAAC;IACzC,IAAI,CAACrE,WAAW,CAACuB,IAAI,CAAC8C,MAAM,CAAC;IAC7B,IAAIqC,EAAE,EACF,IAAI,CAACG,IAAI,CAAC,OAAO,EAAEH,EAAE,CAAC;IAC1B,IAAI,CAACtC,KAAK,CAAC,CAAC;EAChB;EACA;AACJ;AACA;EACI1B,KAAKA,CAAA,EAAG;IACJ,MAAMA,KAAK,GAAGA,CAAA,KAAM;MAChB,IAAI,CAACE,QAAQ,CAAC,cAAc,CAAC;MAC7B3D,KAAK,CAAC,6CAA6C,CAAC;MACpD,IAAI,CAACuD,SAAS,CAACE,KAAK,CAAC,CAAC;IAC1B,CAAC;IACD,MAAMoE,eAAe,GAAGA,CAAA,KAAM;MAC1B,IAAI,CAACC,GAAG,CAAC,SAAS,EAAED,eAAe,CAAC;MACpC,IAAI,CAACC,GAAG,CAAC,cAAc,EAAED,eAAe,CAAC;MACzCpE,KAAK,CAAC,CAAC;IACX,CAAC;IACD,MAAMsE,cAAc,GAAGA,CAAA,KAAM;MACzB;MACA,IAAI,CAACH,IAAI,CAAC,SAAS,EAAEC,eAAe,CAAC;MACrC,IAAI,CAACD,IAAI,CAAC,cAAc,EAAEC,eAAe,CAAC;IAC9C,CAAC;IACD,IAAI,SAAS,KAAK,IAAI,CAACpD,UAAU,IAAI,MAAM,KAAK,IAAI,CAACA,UAAU,EAAE;MAC7D,IAAI,CAACA,UAAU,GAAG,SAAS;MAC3B,IAAI,IAAI,CAAC1D,WAAW,CAACT,MAAM,EAAE;QACzB,IAAI,CAACsH,IAAI,CAAC,OAAO,EAAE,MAAM;UACrB,IAAI,IAAI,CAAClB,SAAS,EAAE;YAChBqB,cAAc,CAAC,CAAC;UACpB,CAAC,MACI;YACDtE,KAAK,CAAC,CAAC;UACX;QACJ,CAAC,CAAC;MACN,CAAC,MACI,IAAI,IAAI,CAACiD,SAAS,EAAE;QACrBqB,cAAc,CAAC,CAAC;MACpB,CAAC,MACI;QACDtE,KAAK,CAAC,CAAC;MACX;IACJ;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIuB,QAAQA,CAACW,GAAG,EAAE;IACV3F,KAAK,CAAC,iBAAiB,EAAE2F,GAAG,CAAC;IAC7BrG,oBAAoB,CAACiF,qBAAqB,GAAG,KAAK;IAClD,IAAI,IAAI,CAAC3D,IAAI,CAACoH,gBAAgB,IAC1B,IAAI,CAAChG,UAAU,CAAC1B,MAAM,GAAG,CAAC,IAC1B,IAAI,CAACmE,UAAU,KAAK,SAAS,EAAE;MAC/BzE,KAAK,CAAC,uBAAuB,CAAC;MAC9B,IAAI,CAACgC,UAAU,CAACiG,KAAK,CAAC,CAAC;MACvB,OAAO,IAAI,CAAClE,KAAK,CAAC,CAAC;IACvB;IACA,IAAI,CAACO,YAAY,CAAC,OAAO,EAAEqB,GAAG,CAAC;IAC/B,IAAI,CAAChC,QAAQ,CAAC,iBAAiB,EAAEgC,GAAG,CAAC;EACzC;EACA;AACJ;AACA;AACA;AACA;EACIhC,QAAQA,CAACsB,MAAM,EAAErB,WAAW,EAAE;IAC1B,IAAI,SAAS,KAAK,IAAI,CAACa,UAAU,IAC7B,MAAM,KAAK,IAAI,CAACA,UAAU,IAC1B,SAAS,KAAK,IAAI,CAACA,UAAU,EAAE;MAC/BzE,KAAK,CAAC,gCAAgC,EAAEiF,MAAM,CAAC;MAC/C;MACA,IAAI,CAACgB,cAAc,CAAC,IAAI,CAACC,iBAAiB,CAAC;MAC3C;MACA,IAAI,CAAC3C,SAAS,CAACC,kBAAkB,CAAC,OAAO,CAAC;MAC1C;MACA,IAAI,CAACD,SAAS,CAACE,KAAK,CAAC,CAAC;MACtB;MACA,IAAI,CAACF,SAAS,CAACC,kBAAkB,CAAC,CAAC;MACnC,IAAItD,kBAAkB,EAAE;QACpB,IAAI,IAAI,CAACoD,0BAA0B,EAAE;UACjClD,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAACkD,0BAA0B,EAAE,KAAK,CAAC;QAC/E;QACA,IAAI,IAAI,CAACI,qBAAqB,EAAE;UAC5B,MAAMsD,CAAC,GAAG3G,uBAAuB,CAACmE,OAAO,CAAC,IAAI,CAACd,qBAAqB,CAAC;UACrE,IAAIsD,CAAC,KAAK,CAAC,CAAC,EAAE;YACVhH,KAAK,CAAC,2CAA2C,CAAC;YAClDK,uBAAuB,CAACmG,MAAM,CAACQ,CAAC,EAAE,CAAC,CAAC;UACxC;QACJ;MACJ;MACA;MACA,IAAI,CAACvC,UAAU,GAAG,QAAQ;MAC1B;MACA,IAAI,CAACP,EAAE,GAAG,IAAI;MACd;MACA,IAAI,CAACI,YAAY,CAAC,OAAO,EAAEW,MAAM,EAAErB,WAAW,CAAC;MAC/C;MACA;MACA,IAAI,CAAC7C,WAAW,GAAG,EAAE;MACrB,IAAI,CAACC,cAAc,GAAG,CAAC;IAC3B;EACJ;AACJ;AACA9B,OAAO,CAACI,oBAAoB,GAAGA,oBAAoB;AACnDA,oBAAoB,CAACqC,QAAQ,GAAG9B,kBAAkB,CAAC8B,QAAQ;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMtC,iBAAiB,SAASC,oBAAoB,CAAC;EACjDoB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGwH,SAAS,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,EAAE;EACvB;EACAjD,MAAMA,CAAA,EAAG;IACL,KAAK,CAACA,MAAM,CAAC,CAAC;IACd,IAAI,MAAM,KAAK,IAAI,CAACT,UAAU,IAAI,IAAI,CAAC7D,IAAI,CAAC+B,OAAO,EAAE;MACjD3C,KAAK,CAAC,yBAAyB,CAAC;MAChC,KAAK,IAAIgH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmB,SAAS,CAAC7H,MAAM,EAAE0G,CAAC,EAAE,EAAE;QAC5C,IAAI,CAACoB,MAAM,CAAC,IAAI,CAACD,SAAS,CAACnB,CAAC,CAAC,CAAC;MAClC;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIoB,MAAMA,CAAC/F,IAAI,EAAE;IACTrC,KAAK,CAAC,wBAAwB,EAAEqC,IAAI,CAAC;IACrC,IAAIkB,SAAS,GAAG,IAAI,CAACS,eAAe,CAAC3B,IAAI,CAAC;IAC1C,IAAIgG,MAAM,GAAG,KAAK;IAClB/I,oBAAoB,CAACiF,qBAAqB,GAAG,KAAK;IAClD,MAAM+D,eAAe,GAAGA,CAAA,KAAM;MAC1B,IAAID,MAAM,EACN;MACJrI,KAAK,CAAC,6BAA6B,EAAEqC,IAAI,CAAC;MAC1CkB,SAAS,CAACsD,IAAI,CAAC,CAAC;QAAExB,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAQ,CAAC,CAAC,CAAC;MACjD/B,SAAS,CAACqE,IAAI,CAAC,QAAQ,EAAGL,GAAG,IAAK;QAC9B,IAAIc,MAAM,EACN;QACJ,IAAI,MAAM,KAAKd,GAAG,CAAClC,IAAI,IAAI,OAAO,KAAKkC,GAAG,CAACjC,IAAI,EAAE;UAC7CtF,KAAK,CAAC,2BAA2B,EAAEqC,IAAI,CAAC;UACxC,IAAI,CAACqE,SAAS,GAAG,IAAI;UACrB,IAAI,CAACpC,YAAY,CAAC,WAAW,EAAEf,SAAS,CAAC;UACzC,IAAI,CAACA,SAAS,EACV;UACJjE,oBAAoB,CAACiF,qBAAqB,GACtC,WAAW,KAAKhB,SAAS,CAAClB,IAAI;UAClCrC,KAAK,CAAC,gCAAgC,EAAE,IAAI,CAACuD,SAAS,CAAClB,IAAI,CAAC;UAC5D,IAAI,CAACkB,SAAS,CAACgF,KAAK,CAAC,MAAM;YACvB,IAAIF,MAAM,EACN;YACJ,IAAI,QAAQ,KAAK,IAAI,CAAC5D,UAAU,EAC5B;YACJzE,KAAK,CAAC,+CAA+C,CAAC;YACtDwI,OAAO,CAAC,CAAC;YACT,IAAI,CAAC7D,YAAY,CAACpB,SAAS,CAAC;YAC5BA,SAAS,CAACsD,IAAI,CAAC,CAAC;cAAExB,IAAI,EAAE;YAAU,CAAC,CAAC,CAAC;YACrC,IAAI,CAACf,YAAY,CAAC,SAAS,EAAEf,SAAS,CAAC;YACvCA,SAAS,GAAG,IAAI;YAChB,IAAI,CAACmD,SAAS,GAAG,KAAK;YACtB,IAAI,CAACvB,KAAK,CAAC,CAAC;UAChB,CAAC,CAAC;QACN,CAAC,MACI;UACDnF,KAAK,CAAC,6BAA6B,EAAEqC,IAAI,CAAC;UAC1C,MAAMsD,GAAG,GAAG,IAAIC,KAAK,CAAC,aAAa,CAAC;UACpC;UACAD,GAAG,CAACpC,SAAS,GAAGA,SAAS,CAAClB,IAAI;UAC9B,IAAI,CAACiC,YAAY,CAAC,cAAc,EAAEqB,GAAG,CAAC;QAC1C;MACJ,CAAC,CAAC;IACN,CAAC;IACD,SAAS8C,eAAeA,CAAA,EAAG;MACvB,IAAIJ,MAAM,EACN;MACJ;MACAA,MAAM,GAAG,IAAI;MACbG,OAAO,CAAC,CAAC;MACTjF,SAAS,CAACE,KAAK,CAAC,CAAC;MACjBF,SAAS,GAAG,IAAI;IACpB;IACA;IACA,MAAMmF,OAAO,GAAI/C,GAAG,IAAK;MACrB,MAAMgD,KAAK,GAAG,IAAI/C,KAAK,CAAC,eAAe,GAAGD,GAAG,CAAC;MAC9C;MACAgD,KAAK,CAACpF,SAAS,GAAGA,SAAS,CAAClB,IAAI;MAChCoG,eAAe,CAAC,CAAC;MACjBzI,KAAK,CAAC,kDAAkD,EAAEqC,IAAI,EAAEsD,GAAG,CAAC;MACpE,IAAI,CAACrB,YAAY,CAAC,cAAc,EAAEqE,KAAK,CAAC;IAC5C,CAAC;IACD,SAASC,gBAAgBA,CAAA,EAAG;MACxBF,OAAO,CAAC,kBAAkB,CAAC;IAC/B;IACA;IACA,SAASG,OAAOA,CAAA,EAAG;MACfH,OAAO,CAAC,eAAe,CAAC;IAC5B;IACA;IACA,SAASI,SAASA,CAACC,EAAE,EAAE;MACnB,IAAIxF,SAAS,IAAIwF,EAAE,CAAC1G,IAAI,KAAKkB,SAAS,CAAClB,IAAI,EAAE;QACzCrC,KAAK,CAAC,4BAA4B,EAAE+I,EAAE,CAAC1G,IAAI,EAAEkB,SAAS,CAAClB,IAAI,CAAC;QAC5DoG,eAAe,CAAC,CAAC;MACrB;IACJ;IACA;IACA,MAAMD,OAAO,GAAGA,CAAA,KAAM;MAClBjF,SAAS,CAACyF,cAAc,CAAC,MAAM,EAAEV,eAAe,CAAC;MACjD/E,SAAS,CAACyF,cAAc,CAAC,OAAO,EAAEN,OAAO,CAAC;MAC1CnF,SAAS,CAACyF,cAAc,CAAC,OAAO,EAAEJ,gBAAgB,CAAC;MACnD,IAAI,CAACd,GAAG,CAAC,OAAO,EAAEe,OAAO,CAAC;MAC1B,IAAI,CAACf,GAAG,CAAC,WAAW,EAAEgB,SAAS,CAAC;IACpC,CAAC;IACDvF,SAAS,CAACqE,IAAI,CAAC,MAAM,EAAEU,eAAe,CAAC;IACvC/E,SAAS,CAACqE,IAAI,CAAC,OAAO,EAAEc,OAAO,CAAC;IAChCnF,SAAS,CAACqE,IAAI,CAAC,OAAO,EAAEgB,gBAAgB,CAAC;IACzC,IAAI,CAAChB,IAAI,CAAC,OAAO,EAAEiB,OAAO,CAAC;IAC3B,IAAI,CAACjB,IAAI,CAAC,WAAW,EAAEkB,SAAS,CAAC;IACjC,IAAI,IAAI,CAACX,SAAS,CAAC3D,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,IAC7CnC,IAAI,KAAK,cAAc,EAAE;MACzB;MACA,IAAI,CAACgC,YAAY,CAAC,MAAM;QACpB,IAAI,CAACgE,MAAM,EAAE;UACT9E,SAAS,CAACmB,IAAI,CAAC,CAAC;QACpB;MACJ,CAAC,EAAE,GAAG,CAAC;IACX,CAAC,MACI;MACDnB,SAAS,CAACmB,IAAI,CAAC,CAAC;IACpB;EACJ;EACAa,WAAWA,CAACD,IAAI,EAAE;IACd,IAAI,CAAC6C,SAAS,GAAG,IAAI,CAACc,eAAe,CAAC3D,IAAI,CAAC4D,QAAQ,CAAC;IACpD,KAAK,CAAC3D,WAAW,CAACD,IAAI,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACI2D,eAAeA,CAACC,QAAQ,EAAE;IACtB,MAAMC,gBAAgB,GAAG,EAAE;IAC3B,KAAK,IAAInC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,QAAQ,CAAC5I,MAAM,EAAE0G,CAAC,EAAE,EAAE;MACtC,IAAI,CAAC,IAAI,CAAChF,UAAU,CAACwC,OAAO,CAAC0E,QAAQ,CAAClC,CAAC,CAAC,CAAC,EACrCmC,gBAAgB,CAAC7G,IAAI,CAAC4G,QAAQ,CAAClC,CAAC,CAAC,CAAC;IAC1C;IACA,OAAOmC,gBAAgB;EAC3B;AACJ;AACAjK,OAAO,CAACG,iBAAiB,GAAGA,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,MAAM,SAASC,iBAAiB,CAAC;EACnCqB,WAAWA,CAACC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IACxB,MAAMwI,CAAC,GAAG,OAAOzI,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGC,IAAI;IAC9C,IAAI,CAACwI,CAAC,CAACpH,UAAU,IACZoH,CAAC,CAACpH,UAAU,IAAI,OAAOoH,CAAC,CAACpH,UAAU,CAAC,CAAC,CAAC,KAAK,QAAS,EAAE;MACvDoH,CAAC,CAACpH,UAAU,GAAG,CAACoH,CAAC,CAACpH,UAAU,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,cAAc,CAAC,EACnEqH,GAAG,CAAElH,aAAa,IAAK5C,UAAU,CAACyC,UAAU,CAACG,aAAa,CAAC,CAAC,CAC5DmH,MAAM,CAAEpH,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC;IAC3B;IACA,KAAK,CAACvB,GAAG,EAAEyI,CAAC,CAAC;EACjB;AACJ;AACAlK,OAAO,CAACE,MAAM,GAAGA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}