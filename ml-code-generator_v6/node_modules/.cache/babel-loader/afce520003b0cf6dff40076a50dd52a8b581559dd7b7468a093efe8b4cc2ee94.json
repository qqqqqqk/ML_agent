{"ast":null,"code":"var _jsxFileName = \"D:\\\\University\\\\Group\\\\ml-code-generator_v3\\\\ml-code-generator_v2\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { uploadFile, SERVER_URL } from './services/api';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [taskDescription, setTaskDescription] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [realTimeSteps, setRealTimeSteps] = useState([]);\n  const socketRef = useRef(null);\n  const processPanelRef = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the process panel whenever new content is added\n    if (processPanelRef.current) {\n      processPanelRef.current.scrollTop = processPanelRef.current.scrollHeight;\n    }\n  }, [realTimeSteps]);\n  useEffect(() => {\n    // Cleanup socket connection on component unmount\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, []);\n  const handleFileChange = async event => {\n    const selectedFiles = Array.from(event.target.files);\n    if (selectedFiles.length > 0) {\n      // Clear previous files and show only newly uploaded ones\n      setFiles([]);\n      setRealTimeSteps([]);\n      const uploadedFiles = [];\n      for (const file of selectedFiles) {\n        try {\n          const response = await uploadFile(file);\n          uploadedFiles.push({\n            name: file.name,\n            filePath: response.filePath\n          });\n        } catch (error) {\n          console.error('Error uploading file:', file.name, error);\n          // Optionally, show an error message to the user\n        }\n      }\n      setFiles(uploadedFiles);\n    }\n  };\n  const connectSocketAndGenerate = () => {\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    const newSocket = io(SERVER_URL);\n    socketRef.current = newSocket;\n    newSocket.on('connect', () => {\n      console.log('Socket connected:', newSocket.id);\n      const filePaths = files.map(f => f.filePath);\n      const message = {\n        description: taskDescription,\n        files: filePaths\n      };\n      newSocket.emit('start-generation', message);\n    });\n    newSocket.on('planning-complete', plan => {\n      console.log('Planning complete:', plan);\n      const steps = plan.map((stepTitle, index) => {\n        const [summary, ...descriptionParts] = stepTitle.split(' - ');\n        const description = descriptionParts.join(' - ');\n        return {\n          id: index + 1,\n          summary: summary.replace(/^\\d+\\.\\s*/, ''),\n          // Remove leading number like \"1. \"\n          description: description,\n          code: '',\n          status: 'pending'\n        };\n      });\n      setRealTimeSteps(steps);\n    });\n    newSocket.on('step-start', data => {\n      console.log('Step start:', data);\n      setRealTimeSteps(prevSteps => {\n        const newSteps = [...prevSteps];\n        const stepIndex = newSteps.findIndex(step => step.id === data.step);\n        if (stepIndex !== -1) {\n          newSteps[stepIndex] = {\n            ...newSteps[stepIndex],\n            status: 'in-progress'\n          };\n        }\n        return newSteps;\n      });\n    });\n    newSocket.on('step-complete', data => {\n      console.log('Step complete:', data);\n      setRealTimeSteps(prevSteps => {\n        const newSteps = [...prevSteps];\n        const stepIndex = newSteps.findIndex(step => step.id === data.step);\n        if (stepIndex !== -1) {\n          newSteps[stepIndex] = {\n            ...newSteps[stepIndex],\n            status: 'complete',\n            code: data.code\n          };\n        }\n        return newSteps;\n      });\n    });\n    newSocket.on('generation-complete', () => {\n      console.log('Generation complete');\n      setIsGenerating(false);\n      newSocket.disconnect();\n      socketRef.current = null;\n    });\n    newSocket.on('error', error => {\n      console.error('An error occurred:', error);\n      setIsGenerating(false);\n      // Find the in-progress step and mark it as error\n      setRealTimeSteps(prevSteps => prevSteps.map(step => step.status === 'in-progress' ? {\n        ...step,\n        status: 'error',\n        code: error.message || 'An unknown error occurred.'\n      } : step));\n      newSocket.disconnect();\n      socketRef.current = null;\n    });\n  };\n  const handleRunClick = () => {\n    if (!taskDescription.trim()) {\n      alert('Please enter a task description.');\n      return;\n    }\n    setIsGenerating(true);\n    setRealTimeSteps([]);\n    connectSocketAndGenerate();\n  };\n  const renderStepStatusIcon = status => {\n    switch (status) {\n      case 'pending':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-icon pending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 24\n        }, this);\n      case 'in-progress':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-icon in-progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 24\n        }, this);\n      case 'complete':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-icon complete\",\n          children: \"\\u2713\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 24\n        }, this);\n      case 'error':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-icon error\",\n          children: \"!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 24\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ML Code Generator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"1. Upload Your Datasets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"file-upload\",\n            className: \"custom-file-upload\",\n            children: \"Click to Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"file-upload\",\n            type: \"file\",\n            multiple: true,\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-list\",\n            children: files.map((file, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"file-item\",\n              children: file.name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"2. Describe Your Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: taskDescription,\n            onChange: e => setTaskDescription(e.target.value),\n            placeholder: \"e.g., 'Build a classification model to predict iris species.'\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"run-button\",\n          onClick: handleRunClick,\n          disabled: isGenerating || files.length === 0,\n          children: isGenerating ? 'Generating...' : 'Run'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        ref: processPanelRef,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Process Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), isGenerating && realTimeSteps.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading-text\",\n          children: \"Planning the steps...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 68\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timeline-container\",\n          children: realTimeSteps.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `timeline-item ${step.status}`,\n            children: [renderStepStatusIcon(step.status), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timeline-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Step \", step.id, \": \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: step.summary\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 37\n              }, this), step.description && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"step-description\",\n                children: step.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 58\n              }, this), step.code && step.status !== 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"code-block\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Generated Code:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                  children: /*#__PURE__*/_jsxDEV(\"code\", {\n                    children: step.code\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 50\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 42\n              }, this), step.status === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"error-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Error:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                  children: /*#__PURE__*/_jsxDEV(\"code\", {\n                    children: step.code\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 50\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 33\n            }, this)]\n          }, step.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 30\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"wPu5qut5KB9waIs0rRkQCVyFLiw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","uploadFile","SERVER_URL","jsxDEV","_jsxDEV","App","_s","files","setFiles","taskDescription","setTaskDescription","isGenerating","setIsGenerating","realTimeSteps","setRealTimeSteps","socketRef","processPanelRef","current","scrollTop","scrollHeight","disconnect","handleFileChange","event","selectedFiles","Array","from","target","length","uploadedFiles","file","response","push","name","filePath","error","console","connectSocketAndGenerate","newSocket","on","log","id","filePaths","map","f","message","description","emit","plan","steps","stepTitle","index","summary","descriptionParts","split","join","replace","code","status","data","prevSteps","newSteps","stepIndex","findIndex","step","handleRunClick","trim","alert","renderStepStatusIcon","className","fileName","_jsxFileName","lineNumber","columnNumber","children","htmlFor","type","multiple","onChange","value","e","placeholder","onClick","disabled","ref","_c","$RefreshReg$"],"sources":["D:/University/Group/ml-code-generator_v3/ml-code-generator_v2/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { uploadFile, SERVER_URL } from './services/api';\nimport './App.css';\n\nfunction App() {\n    const [files, setFiles] = useState([]);\n    const [taskDescription, setTaskDescription] = useState('');\n    const [isGenerating, setIsGenerating] = useState(false);\n    const [realTimeSteps, setRealTimeSteps] = useState([]);\n    const socketRef = useRef(null);\n    const processPanelRef = useRef(null);\n\n    useEffect(() => {\n        // Scroll to the bottom of the process panel whenever new content is added\n        if (processPanelRef.current) {\n            processPanelRef.current.scrollTop = processPanelRef.current.scrollHeight;\n        }\n    }, [realTimeSteps]);\n\n\n    useEffect(() => {\n        // Cleanup socket connection on component unmount\n        return () => {\n            if (socketRef.current) {\n                socketRef.current.disconnect();\n                socketRef.current = null;\n            }\n        };\n    }, []);\n\n    const handleFileChange = async (event) => {\n        const selectedFiles = Array.from(event.target.files);\n        if (selectedFiles.length > 0) {\n            // Clear previous files and show only newly uploaded ones\n            setFiles([]);\n            setRealTimeSteps([]);\n\n            const uploadedFiles = [];\n            for (const file of selectedFiles) {\n                try {\n                    const response = await uploadFile(file);\n                    uploadedFiles.push({ name: file.name, filePath: response.filePath });\n                } catch (error) {\n                    console.error('Error uploading file:', file.name, error);\n                    // Optionally, show an error message to the user\n                }\n            }\n            setFiles(uploadedFiles);\n        }\n    };\n\n    const connectSocketAndGenerate = () => {\n        if (socketRef.current) {\n            socketRef.current.disconnect();\n        }\n\n        const newSocket = io(SERVER_URL);\n        socketRef.current = newSocket;\n\n        newSocket.on('connect', () => {\n            console.log('Socket connected:', newSocket.id);\n            const filePaths = files.map(f => f.filePath);\n            const message = {\n                description: taskDescription,\n                files: filePaths\n            };\n            newSocket.emit('start-generation', message);\n        });\n\n        newSocket.on('planning-complete', (plan) => {\n            console.log('Planning complete:', plan);\n            const steps = plan.map((stepTitle, index) => {\n                const [summary, ...descriptionParts] = stepTitle.split(' - ');\n                const description = descriptionParts.join(' - ');\n                return {\n                    id: index + 1,\n                    summary: summary.replace(/^\\d+\\.\\s*/, ''), // Remove leading number like \"1. \"\n                    description: description,\n                    code: '',\n                    status: 'pending'\n                };\n            });\n            setRealTimeSteps(steps);\n        });\n        \n        newSocket.on('step-start', (data) => {\n            console.log('Step start:', data);\n            setRealTimeSteps(prevSteps => {\n                const newSteps = [...prevSteps];\n                const stepIndex = newSteps.findIndex(step => step.id === data.step);\n                if (stepIndex !== -1) {\n                    newSteps[stepIndex] = { ...newSteps[stepIndex], status: 'in-progress' };\n                }\n                return newSteps;\n            });\n        });\n\n        newSocket.on('step-complete', (data) => {\n            console.log('Step complete:', data);\n             setRealTimeSteps(prevSteps => {\n                const newSteps = [...prevSteps];\n                const stepIndex = newSteps.findIndex(step => step.id === data.step);\n                if (stepIndex !== -1) {\n                    newSteps[stepIndex] = { \n                        ...newSteps[stepIndex], \n                        status: 'complete', \n                        code: data.code \n                    };\n                }\n                return newSteps;\n            });\n        });\n\n        newSocket.on('generation-complete', () => {\n            console.log('Generation complete');\n            setIsGenerating(false);\n            newSocket.disconnect();\n            socketRef.current = null;\n        });\n\n        newSocket.on('error', (error) => {\n            console.error('An error occurred:', error);\n            setIsGenerating(false);\n            // Find the in-progress step and mark it as error\n            setRealTimeSteps(prevSteps => prevSteps.map(step => \n                step.status === 'in-progress' ? { ...step, status: 'error', code: error.message || 'An unknown error occurred.' } : step\n            ));\n            newSocket.disconnect();\n            socketRef.current = null;\n        });\n    };\n\n    const handleRunClick = () => {\n        if (!taskDescription.trim()) {\n            alert('Please enter a task description.');\n            return;\n        }\n        setIsGenerating(true);\n        setRealTimeSteps([]);\n        connectSocketAndGenerate();\n    };\n\n    const renderStepStatusIcon = (status) => {\n        switch (status) {\n            case 'pending':\n                return <div className=\"status-icon pending\"></div>;\n            case 'in-progress':\n                return <div className=\"status-icon in-progress\"></div>;\n            case 'complete':\n                return <div className=\"status-icon complete\">✓</div>;\n            case 'error':\n                return <div className=\"status-icon error\">!</div>;\n            default:\n                return null;\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"main-container\">\n                <div className=\"left-panel\">\n                    <h1>ML Code Generator</h1>\n\n                    <div className=\"upload-section\">\n                        <h2>1. Upload Your Datasets</h2>\n                        <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n                           Click to Upload\n                        </label>\n                        <input id=\"file-upload\" type=\"file\" multiple onChange={handleFileChange} />\n                        <div className=\"file-list\">\n                            {files.map((file, index) => (\n                                <p key={index} className=\"file-item\">{file.name}</p>\n                            ))}\n                        </div>\n                    </div>\n\n                    <div className=\"task-section\">\n                        <h2>2. Describe Your Task</h2>\n                        <textarea\n                            value={taskDescription}\n                            onChange={(e) => setTaskDescription(e.target.value)}\n                            placeholder=\"e.g., 'Build a classification model to predict iris species.'\"\n                        />\n                    </div>\n\n                    <button\n                        className=\"run-button\"\n                        onClick={handleRunClick}\n                        disabled={isGenerating || files.length === 0}\n                    >\n                        {isGenerating ? 'Generating...' : 'Run'}\n                    </button>\n                </div>\n\n                <div className=\"right-panel\" ref={processPanelRef}>\n                    <h2>Process Details</h2>\n                    {isGenerating && realTimeSteps.length === 0 && <p className=\"loading-text\">Planning the steps...</p>}\n                    <div className=\"timeline-container\">\n                        {realTimeSteps.map((step, index) => (\n                             <div key={step.id} className={`timeline-item ${step.status}`}>\n                                {renderStepStatusIcon(step.status)}\n                                <div className=\"timeline-content\">\n                                    <h3>\n                                        <span>Step {step.id}: </span>\n                                        <strong>{step.summary}</strong>\n                                    </h3>\n                                    {step.description && <p className=\"step-description\">{step.description}</p>}\n                                    {step.code && step.status !== 'error' && (\n                                         <div className=\"code-block\">\n                                            <h4>Generated Code:</h4>\n                                            <pre><code>{step.code}</code></pre>\n                                        </div>\n                                    )}\n                                     {step.status === 'error' && (\n                                        <div className=\"error-message\">\n                                            <h4>Error:</h4>\n                                            <pre><code>{step.code}</code></pre>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,EAAE,QAAQ,kBAAkB;AACrC,SAASC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB;AACvD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMkB,SAAS,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMiB,eAAe,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACZ;IACA,IAAIkB,eAAe,CAACC,OAAO,EAAE;MACzBD,eAAe,CAACC,OAAO,CAACC,SAAS,GAAGF,eAAe,CAACC,OAAO,CAACE,YAAY;IAC5E;EACJ,CAAC,EAAE,CAACN,aAAa,CAAC,CAAC;EAGnBf,SAAS,CAAC,MAAM;IACZ;IACA,OAAO,MAAM;MACT,IAAIiB,SAAS,CAACE,OAAO,EAAE;QACnBF,SAAS,CAACE,OAAO,CAACG,UAAU,CAAC,CAAC;QAC9BL,SAAS,CAACE,OAAO,GAAG,IAAI;MAC5B;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACtC,MAAMC,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,CAACnB,KAAK,CAAC;IACpD,IAAIgB,aAAa,CAACI,MAAM,GAAG,CAAC,EAAE;MAC1B;MACAnB,QAAQ,CAAC,EAAE,CAAC;MACZM,gBAAgB,CAAC,EAAE,CAAC;MAEpB,MAAMc,aAAa,GAAG,EAAE;MACxB,KAAK,MAAMC,IAAI,IAAIN,aAAa,EAAE;QAC9B,IAAI;UACA,MAAMO,QAAQ,GAAG,MAAM7B,UAAU,CAAC4B,IAAI,CAAC;UACvCD,aAAa,CAACG,IAAI,CAAC;YAAEC,IAAI,EAAEH,IAAI,CAACG,IAAI;YAAEC,QAAQ,EAAEH,QAAQ,CAACG;UAAS,CAAC,CAAC;QACxE,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEL,IAAI,CAACG,IAAI,EAAEE,KAAK,CAAC;UACxD;QACJ;MACJ;MACA1B,QAAQ,CAACoB,aAAa,CAAC;IAC3B;EACJ,CAAC;EAED,MAAMQ,wBAAwB,GAAGA,CAAA,KAAM;IACnC,IAAIrB,SAAS,CAACE,OAAO,EAAE;MACnBF,SAAS,CAACE,OAAO,CAACG,UAAU,CAAC,CAAC;IAClC;IAEA,MAAMiB,SAAS,GAAGrC,EAAE,CAACE,UAAU,CAAC;IAChCa,SAAS,CAACE,OAAO,GAAGoB,SAAS;IAE7BA,SAAS,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;MAC1BH,OAAO,CAACI,GAAG,CAAC,mBAAmB,EAAEF,SAAS,CAACG,EAAE,CAAC;MAC9C,MAAMC,SAAS,GAAGlC,KAAK,CAACmC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACV,QAAQ,CAAC;MAC5C,MAAMW,OAAO,GAAG;QACZC,WAAW,EAAEpC,eAAe;QAC5BF,KAAK,EAAEkC;MACX,CAAC;MACDJ,SAAS,CAACS,IAAI,CAAC,kBAAkB,EAAEF,OAAO,CAAC;IAC/C,CAAC,CAAC;IAEFP,SAAS,CAACC,EAAE,CAAC,mBAAmB,EAAGS,IAAI,IAAK;MACxCZ,OAAO,CAACI,GAAG,CAAC,oBAAoB,EAAEQ,IAAI,CAAC;MACvC,MAAMC,KAAK,GAAGD,IAAI,CAACL,GAAG,CAAC,CAACO,SAAS,EAAEC,KAAK,KAAK;QACzC,MAAM,CAACC,OAAO,EAAE,GAAGC,gBAAgB,CAAC,GAAGH,SAAS,CAACI,KAAK,CAAC,KAAK,CAAC;QAC7D,MAAMR,WAAW,GAAGO,gBAAgB,CAACE,IAAI,CAAC,KAAK,CAAC;QAChD,OAAO;UACHd,EAAE,EAAEU,KAAK,GAAG,CAAC;UACbC,OAAO,EAAEA,OAAO,CAACI,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;UAAE;UAC3CV,WAAW,EAAEA,WAAW;UACxBW,IAAI,EAAE,EAAE;UACRC,MAAM,EAAE;QACZ,CAAC;MACL,CAAC,CAAC;MACF3C,gBAAgB,CAACkC,KAAK,CAAC;IAC3B,CAAC,CAAC;IAEFX,SAAS,CAACC,EAAE,CAAC,YAAY,EAAGoB,IAAI,IAAK;MACjCvB,OAAO,CAACI,GAAG,CAAC,aAAa,EAAEmB,IAAI,CAAC;MAChC5C,gBAAgB,CAAC6C,SAAS,IAAI;QAC1B,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;QAC/B,MAAME,SAAS,GAAGD,QAAQ,CAACE,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACvB,EAAE,KAAKkB,IAAI,CAACK,IAAI,CAAC;QACnE,IAAIF,SAAS,KAAK,CAAC,CAAC,EAAE;UAClBD,QAAQ,CAACC,SAAS,CAAC,GAAG;YAAE,GAAGD,QAAQ,CAACC,SAAS,CAAC;YAAEJ,MAAM,EAAE;UAAc,CAAC;QAC3E;QACA,OAAOG,QAAQ;MACnB,CAAC,CAAC;IACN,CAAC,CAAC;IAEFvB,SAAS,CAACC,EAAE,CAAC,eAAe,EAAGoB,IAAI,IAAK;MACpCvB,OAAO,CAACI,GAAG,CAAC,gBAAgB,EAAEmB,IAAI,CAAC;MAClC5C,gBAAgB,CAAC6C,SAAS,IAAI;QAC3B,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;QAC/B,MAAME,SAAS,GAAGD,QAAQ,CAACE,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACvB,EAAE,KAAKkB,IAAI,CAACK,IAAI,CAAC;QACnE,IAAIF,SAAS,KAAK,CAAC,CAAC,EAAE;UAClBD,QAAQ,CAACC,SAAS,CAAC,GAAG;YAClB,GAAGD,QAAQ,CAACC,SAAS,CAAC;YACtBJ,MAAM,EAAE,UAAU;YAClBD,IAAI,EAAEE,IAAI,CAACF;UACf,CAAC;QACL;QACA,OAAOI,QAAQ;MACnB,CAAC,CAAC;IACN,CAAC,CAAC;IAEFvB,SAAS,CAACC,EAAE,CAAC,qBAAqB,EAAE,MAAM;MACtCH,OAAO,CAACI,GAAG,CAAC,qBAAqB,CAAC;MAClC3B,eAAe,CAAC,KAAK,CAAC;MACtByB,SAAS,CAACjB,UAAU,CAAC,CAAC;MACtBL,SAAS,CAACE,OAAO,GAAG,IAAI;IAC5B,CAAC,CAAC;IAEFoB,SAAS,CAACC,EAAE,CAAC,OAAO,EAAGJ,KAAK,IAAK;MAC7BC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CtB,eAAe,CAAC,KAAK,CAAC;MACtB;MACAE,gBAAgB,CAAC6C,SAAS,IAAIA,SAAS,CAACjB,GAAG,CAACqB,IAAI,IAC5CA,IAAI,CAACN,MAAM,KAAK,aAAa,GAAG;QAAE,GAAGM,IAAI;QAAEN,MAAM,EAAE,OAAO;QAAED,IAAI,EAAEtB,KAAK,CAACU,OAAO,IAAI;MAA6B,CAAC,GAAGmB,IACxH,CAAC,CAAC;MACF1B,SAAS,CAACjB,UAAU,CAAC,CAAC;MACtBL,SAAS,CAACE,OAAO,GAAG,IAAI;IAC5B,CAAC,CAAC;EACN,CAAC;EAED,MAAM+C,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAI,CAACvD,eAAe,CAACwD,IAAI,CAAC,CAAC,EAAE;MACzBC,KAAK,CAAC,kCAAkC,CAAC;MACzC;IACJ;IACAtD,eAAe,CAAC,IAAI,CAAC;IACrBE,gBAAgB,CAAC,EAAE,CAAC;IACpBsB,wBAAwB,CAAC,CAAC;EAC9B,CAAC;EAED,MAAM+B,oBAAoB,GAAIV,MAAM,IAAK;IACrC,QAAQA,MAAM;MACV,KAAK,SAAS;QACV,oBAAOrD,OAAA;UAAKgE,SAAS,EAAC;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MACtD,KAAK,aAAa;QACd,oBAAOpE,OAAA;UAAKgE,SAAS,EAAC;QAAyB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAC1D,KAAK,UAAU;QACX,oBAAOpE,OAAA;UAAKgE,SAAS,EAAC,sBAAsB;UAAAK,QAAA,EAAC;QAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MACxD,KAAK,OAAO;QACR,oBAAOpE,OAAA;UAAKgE,SAAS,EAAC,mBAAmB;UAAAK,QAAA,EAAC;QAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MACrD;QACI,OAAO,IAAI;IACnB;EACJ,CAAC;EAED,oBACIpE,OAAA;IAAKgE,SAAS,EAAC,KAAK;IAAAK,QAAA,eAChBrE,OAAA;MAAKgE,SAAS,EAAC,gBAAgB;MAAAK,QAAA,gBAC3BrE,OAAA;QAAKgE,SAAS,EAAC,YAAY;QAAAK,QAAA,gBACvBrE,OAAA;UAAAqE,QAAA,EAAI;QAAiB;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAE1BpE,OAAA;UAAKgE,SAAS,EAAC,gBAAgB;UAAAK,QAAA,gBAC3BrE,OAAA;YAAAqE,QAAA,EAAI;UAAuB;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChCpE,OAAA;YAAOsE,OAAO,EAAC,aAAa;YAACN,SAAS,EAAC,oBAAoB;YAAAK,QAAA,EAAC;UAE5D;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRpE,OAAA;YAAOoC,EAAE,EAAC,aAAa;YAACmC,IAAI,EAAC,MAAM;YAACC,QAAQ;YAACC,QAAQ,EAAExD;UAAiB;YAAAgD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC3EpE,OAAA;YAAKgE,SAAS,EAAC,WAAW;YAAAK,QAAA,EACrBlE,KAAK,CAACmC,GAAG,CAAC,CAACb,IAAI,EAAEqB,KAAK,kBACnB9C,OAAA;cAAegE,SAAS,EAAC,WAAW;cAAAK,QAAA,EAAE5C,IAAI,CAACG;YAAI,GAAvCkB,KAAK;cAAAmB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAsC,CACtD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAENpE,OAAA;UAAKgE,SAAS,EAAC,cAAc;UAAAK,QAAA,gBACzBrE,OAAA;YAAAqE,QAAA,EAAI;UAAqB;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9BpE,OAAA;YACI0E,KAAK,EAAErE,eAAgB;YACvBoE,QAAQ,EAAGE,CAAC,IAAKrE,kBAAkB,CAACqE,CAAC,CAACrD,MAAM,CAACoD,KAAK,CAAE;YACpDE,WAAW,EAAC;UAA+D;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9E,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAENpE,OAAA;UACIgE,SAAS,EAAC,YAAY;UACtBa,OAAO,EAAEjB,cAAe;UACxBkB,QAAQ,EAAEvE,YAAY,IAAIJ,KAAK,CAACoB,MAAM,KAAK,CAAE;UAAA8C,QAAA,EAE5C9D,YAAY,GAAG,eAAe,GAAG;QAAK;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eAENpE,OAAA;QAAKgE,SAAS,EAAC,aAAa;QAACe,GAAG,EAAEnE,eAAgB;QAAAyD,QAAA,gBAC9CrE,OAAA;UAAAqE,QAAA,EAAI;QAAe;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACvB7D,YAAY,IAAIE,aAAa,CAACc,MAAM,KAAK,CAAC,iBAAIvB,OAAA;UAAGgE,SAAS,EAAC,cAAc;UAAAK,QAAA,EAAC;QAAqB;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACpGpE,OAAA;UAAKgE,SAAS,EAAC,oBAAoB;UAAAK,QAAA,EAC9B5D,aAAa,CAAC6B,GAAG,CAAC,CAACqB,IAAI,EAAEb,KAAK,kBAC1B9C,OAAA;YAAmBgE,SAAS,EAAE,iBAAiBL,IAAI,CAACN,MAAM,EAAG;YAAAgB,QAAA,GACzDN,oBAAoB,CAACJ,IAAI,CAACN,MAAM,CAAC,eAClCrD,OAAA;cAAKgE,SAAS,EAAC,kBAAkB;cAAAK,QAAA,gBAC7BrE,OAAA;gBAAAqE,QAAA,gBACIrE,OAAA;kBAAAqE,QAAA,GAAM,OAAK,EAACV,IAAI,CAACvB,EAAE,EAAC,IAAE;gBAAA;kBAAA6B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAC7BpE,OAAA;kBAAAqE,QAAA,EAASV,IAAI,CAACZ;gBAAO;kBAAAkB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAS,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/B,CAAC,EACJT,IAAI,CAAClB,WAAW,iBAAIzC,OAAA;gBAAGgE,SAAS,EAAC,kBAAkB;gBAAAK,QAAA,EAAEV,IAAI,CAAClB;cAAW;gBAAAwB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EAC1ET,IAAI,CAACP,IAAI,IAAIO,IAAI,CAACN,MAAM,KAAK,OAAO,iBAChCrD,OAAA;gBAAKgE,SAAS,EAAC,YAAY;gBAAAK,QAAA,gBACxBrE,OAAA;kBAAAqE,QAAA,EAAI;gBAAe;kBAAAJ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACxBpE,OAAA;kBAAAqE,QAAA,eAAKrE,OAAA;oBAAAqE,QAAA,EAAOV,IAAI,CAACP;kBAAI;oBAAAa,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClC,CACR,EACCT,IAAI,CAACN,MAAM,KAAK,OAAO,iBACrBrD,OAAA;gBAAKgE,SAAS,EAAC,eAAe;gBAAAK,QAAA,gBAC1BrE,OAAA;kBAAAqE,QAAA,EAAI;gBAAM;kBAAAJ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACfpE,OAAA;kBAAAqE,QAAA,eAAKrE,OAAA;oBAAAqE,QAAA,EAAOV,IAAI,CAACP;kBAAI;oBAAAa,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClC,CACR;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC;UAAA,GApBCT,IAAI,CAACvB,EAAE;YAAA6B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBb,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAClE,EAAA,CA/NQD,GAAG;AAAA+E,EAAA,GAAH/E,GAAG;AAiOZ,eAAeA,GAAG;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}