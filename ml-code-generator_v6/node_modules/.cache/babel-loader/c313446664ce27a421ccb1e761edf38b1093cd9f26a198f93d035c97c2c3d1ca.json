{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Polling = void 0;\nconst transport_js_1 = require(\"../transport.js\");\nconst util_js_1 = require(\"../util.js\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:polling\"); // debug()\nclass Polling extends transport_js_1.Transport {\n  constructor() {\n    super(...arguments);\n    this._polling = false;\n  }\n  get name() {\n    return \"polling\";\n  }\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @protected\n   */\n  doOpen() {\n    this._poll();\n  }\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n   * @package\n   */\n  pause(onPause) {\n    this.readyState = \"pausing\";\n    const pause = () => {\n      debug(\"paused\");\n      this.readyState = \"paused\";\n      onPause();\n    };\n    if (this._polling || !this.writable) {\n      let total = 0;\n      if (this._polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function () {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function () {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  /**\n   * Starts polling cycle.\n   *\n   * @private\n   */\n  _poll() {\n    debug(\"polling\");\n    this._polling = true;\n    this.doPoll();\n    this.emitReserved(\"poll\");\n  }\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @protected\n   */\n  onData(data) {\n    debug(\"polling got data %s\", data);\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      }\n      // if its a close packet, we close the ongoing requests\n      if (\"close\" === packet.type) {\n        this.onClose({\n          description: \"transport closed by the server\"\n        });\n        return false;\n      }\n      // otherwise bypass onData and handle the message\n      this.onPacket(packet);\n    };\n    // decode payload\n    (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);\n    // if an event did not trigger closing\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this._polling = false;\n      this.emitReserved(\"pollComplete\");\n      if (\"open\" === this.readyState) {\n        this._poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n  /**\n   * For polling, send a close packet.\n   *\n   * @protected\n   */\n  doClose() {\n    const close = () => {\n      debug(\"writing close packet\");\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} packets - data packets\n   * @protected\n   */\n  write(packets) {\n    this.writable = false;\n    (0, engine_io_parser_1.encodePayload)(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emitReserved(\"drain\");\n      });\n    });\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @private\n   */\n  uri() {\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    const query = this.query || {};\n    // cache busting is forced\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = (0, util_js_1.randomString)();\n    }\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n    return this.createUri(schema, query);\n  }\n}\nexports.Polling = Polling;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Polling","transport_js_1","require","util_js_1","engine_io_parser_1","debug_1","debug","default","Transport","constructor","arguments","_polling","name","doOpen","_poll","pause","onPause","readyState","writable","total","once","doPoll","emitReserved","onData","data","callback","packet","type","onOpen","onClose","description","onPacket","decodePayload","socket","binaryType","forEach","doClose","close","write","packets","encodePayload","doWrite","uri","schema","opts","secure","query","timestampRequests","timestampParam","randomString","supportsBinary","sid","b64","createUri"],"sources":["E:/ml-code-generator_v6/ml-code-generator_v6/node_modules/engine.io-client/build/cjs/transports/polling.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polling = void 0;\nconst transport_js_1 = require(\"../transport.js\");\nconst util_js_1 = require(\"../util.js\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:polling\"); // debug()\nclass Polling extends transport_js_1.Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            debug(\"paused\");\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                debug(\"we are currently polling - waiting to pause\");\n                total++;\n                this.once(\"pollComplete\", function () {\n                    debug(\"pre-pause polling complete\");\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                debug(\"we are currently writing - waiting to pause\");\n                total++;\n                this.once(\"drain\", function () {\n                    debug(\"pre-pause writing complete\");\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        debug(\"polling\");\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        debug(\"polling got data %s\", data);\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n                debug('ignoring poll - transport state \"%s\"', this.readyState);\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            debug(\"writing close packet\");\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            debug(\"transport open - closing\");\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            debug(\"transport not open - deferring close\");\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        (0, engine_io_parser_1.encodePayload)(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = (0, util_js_1.randomString)();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\nexports.Polling = Polling;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}