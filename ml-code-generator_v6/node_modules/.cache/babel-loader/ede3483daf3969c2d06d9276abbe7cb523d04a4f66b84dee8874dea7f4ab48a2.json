{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\nexport const uploadDataset = async (file, metadata) => {\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('name', file.name);\n  formData.append('type', metadata.type);\n  formData.append('description', metadata.description || '');\n  formData.append('metadata', JSON.stringify(metadata));\n  formData.append('userId', metadata.userId);\n  const response = await fetch(`${API_BASE_URL}/datasets`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to upload dataset');\n  }\n  return response.json();\n};\nexport const getDatasets = async userId => {\n  const response = await fetch(`${API_BASE_URL}/datasets?userId=${userId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch datasets');\n  }\n  return response.json();\n};\nexport const getDataset = async id => {\n  const response = await fetch(`${API_BASE_URL}/datasets/${id}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch dataset');\n  }\n  return response.json();\n};\nexport const deleteDataset = async id => {\n  const response = await fetch(`${API_BASE_URL}/datasets/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete dataset');\n  }\n  return response.json();\n};\nexport const generateCode = async (taskPrompt, datasetPath) => {\n  const response = await fetch(`${API_BASE_URL}/generate-code`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      task_prompt: taskPrompt,\n      dataset_path: datasetPath\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Failed to generate code');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","uploadDataset","file","metadata","formData","FormData","append","name","type","description","JSON","stringify","userId","response","fetch","method","body","ok","Error","json","getDatasets","getDataset","id","deleteDataset","generateCode","taskPrompt","datasetPath","headers","task_prompt","dataset_path"],"sources":["D:/University/Group/ml-code-generator_v3/ml-code-generator_v2/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nexport const uploadDataset = async (file, metadata) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('name', file.name);\r\n  formData.append('type', metadata.type);\r\n  formData.append('description', metadata.description || '');\r\n  formData.append('metadata', JSON.stringify(metadata));\r\n  formData.append('userId', metadata.userId);\r\n\r\n  const response = await fetch(`${API_BASE_URL}/datasets`, {\r\n    method: 'POST',\r\n    body: formData,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to upload dataset');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getDatasets = async (userId) => {\r\n  const response = await fetch(`${API_BASE_URL}/datasets?userId=${userId}`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch datasets');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const getDataset = async (id) => {\r\n  const response = await fetch(`${API_BASE_URL}/datasets/${id}`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch dataset');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const deleteDataset = async (id) => {\r\n  const response = await fetch(`${API_BASE_URL}/datasets/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to delete dataset');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const generateCode = async (taskPrompt, datasetPath) => {\r\n  const response = await fetch(`${API_BASE_URL}/generate-code`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      task_prompt: taskPrompt,\r\n      dataset_path: datasetPath\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to generate code');\r\n  }\r\n\r\n  return response.json();\r\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,KAAK;EACrD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAC7BE,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAACK,IAAI,CAAC;EAClCH,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,QAAQ,CAACK,IAAI,CAAC;EACtCJ,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,QAAQ,CAACM,WAAW,IAAI,EAAE,CAAC;EAC1DL,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEI,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,CAAC;EACrDC,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,QAAQ,CAACS,MAAM,CAAC;EAE1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,WAAW,EAAE;IACvDe,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEZ;EACR,CAAC,CAAC;EAEF,IAAI,CAACS,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOR,MAAM,IAAK;EAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,oBAAoBY,MAAM,EAAE,CAAC;EACzE,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAOC,EAAE,IAAK;EACtC,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,aAAasB,EAAE,EAAE,CAAC;EAC9D,IAAI,CAACT,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMI,aAAa,GAAG,MAAOD,EAAE,IAAK;EACzC,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,aAAasB,EAAE,EAAE,EAAE;IAC7DP,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACF,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAOC,UAAU,EAAEC,WAAW,KAAK;EAC7D,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,gBAAgB,EAAE;IAC5De,MAAM,EAAE,MAAM;IACdY,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDX,IAAI,EAAEN,IAAI,CAACC,SAAS,CAAC;MACnBiB,WAAW,EAAEH,UAAU;MACvBI,YAAY,EAAEH;IAChB,CAAC;EACH,CAAC,CAAC;EAEF,IAAI,CAACb,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}